import PropTypes from 'prop-types';
import { Component } from 'react';
import { connect } from 'react-redux';
import littleLoader from 'little-loader';
import { delay } from 'lodash';
import { configAssetsUrlSelector } from '../../state/selectors/config';
import {
  iovationGlobalNameSelector,
  iovationMaxDelaySelector
} from '../../state/selectors/risk';

import windowUtils from '../../utils/window';

export class Iovation extends Component {
  constructor() {
    super();
    this.getBlackBoxValue = this.getBlackBoxValue.bind(this);
    this.handleBlackBox = this.handleBlackBox.bind(this);
  }

  componentDidMount() {
    const win =
      process.env.NODE_ENV === 'production' ? window : windowUtils.getWindow();
    const { assetsUrl, iovationGlobalName } = this.props;
    if (Iovation.bbValue.length) {
      return;
    }

    /* eslint-disable camelcase*/
    win.io_global_object_name = iovationGlobalName;
    win[iovationGlobalName] = win[iovationGlobalName] || {
      install_flash: false,
      enable_flash: false,
      loader: {
        uri_hook: '/iojs',
        version: '5.1.0'
      },
      bb_callback: this.handleBlackBox
    };
    /* eslint-enable camelcase */
    // Load iovation script which instantiates further scripts downloaded from iovation
    littleLoader(`${assetsUrl}/iovation-first-third.js`);
  }

  handleBlackBox(bb) {
    Iovation.bbValue = bb;
  }

  getBlackBoxValue() {
    return new Promise(resolve => {
      // Wait for the blackbox value to be generated by Iovation.
      const interval = 200;
      let remainingWaitTime = this.props.iovationMaxDelay;
      const check = () => {
        if (Iovation.bbValue.length || remainingWaitTime <= 0) {
          resolve(Iovation.bbValue);
        } else {
          remainingWaitTime -= interval;
          delay(check, interval);
        }
      };
      check();
    });
  }

  render() {
    return null;
  }
}

// Using a static variable to retain value irrespective of React lifecycle events.
Iovation.bbValue = '';

Iovation.propTypes = {
  iovationGlobalName: PropTypes.string.isRequired,
  iovationMaxDelay: PropTypes.number.isRequired
};

const select = state => ({
  assetsUrl: configAssetsUrlSelector(state),
  iovationGlobalName: iovationGlobalNameSelector(state),
  iovationMaxDelay: iovationMaxDelaySelector(state)
});

export default connect(
  select,
  null,
  null,
  { forwardRef: true }
)(Iovation);
